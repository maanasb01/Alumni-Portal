// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  isRegistered      Boolean             @default(false)
  organization      Organization?       @relation(fields: [organizationId], references: [id])
  organizationId    String?
  phone             String?
  // degree            Degree?             @relation(fields: [degreeId], references: [id])
  // degreeId          String?
  degree            String?
  EmploymentHistory EmploymentHistory[]
  Posts             Post[]
  OrganizedEvents   Event[]
  FamilyMembers     FamilyMember[]
}

// For Authentication
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Country {
  id           Int            @id @default(autoincrement())
  name         String
  States       State[]
  Cities       City[]
  Organization Organization[]
  Currency     Currency[]

  @@index([name])
}

model State {
  id           Int            @id @default(autoincrement())
  name         String
  country      Country        @relation(fields: [countryId], references: [id])
  countryId    Int
  Cities       City[]
  Organization Organization[]

  @@index([name])
  @@index([countryId])
}

model City {
  id           Int            @id @default(autoincrement())
  name         String
  country      Country        @relation(fields: [countryId], references: [id])
  countryId    Int
  state        State          @relation(fields: [stateId], references: [id])
  stateId      Int
  Organization Organization[]

  @@index([name])
  @@index([countryId])
  @@index([stateId])
}

model Currency {
  id             Int     @id @default(autoincrement())
  name           String
  // The abbreviation ex- INR for Rupee
  currency       String
  currencySymbol String
  country        Country @relation(fields: [countryId], references: [id])
  countryId      Int
}

enum OrgType {
  University
  College
  School
}

model Organization {
  id        String  @id @default(cuid())
  name      String
  type      OrgType
  members   User[]
  country   Country @relation(fields: [countryId], references: [id])
  state     State   @relation(fields: [stateId], references: [id])
  city      City    @relation(fields: [cityId], references: [id])
  countryId Int
  stateId   Int
  cityId    Int
}

// model Degree {
//   id    String @id @default(cuid())
//   name  String
//   users User[]
// }

model EmploymentHistory {
  id        String    @id @default(cuid())
  personId  String
  person    User      @relation(fields: [personId], references: [id])
  company   String
  position  String
  startDate DateTime
  endDate   DateTime?
}

enum PostType {
  Regular
  FinancialEmergency
  Announcement
}

model Post {
  id          String   @id @default(cuid())
  type        PostType
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  description String
}

model Event {
  id          String   @id @default(cuid())
  type        PostType
  organizer   User     @relation(fields: [organizerId], references: [id])
  organizerId String
  description String
  fee         Float    @default(0)
  currency    String
}

model FamilyMember {
  id          String  @id @default(cuid())
  name        String
  relation    String
  description String?
  personId    String
  person      User    @relation(fields: [personId], references: [id])
}
